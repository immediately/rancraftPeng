package rancraftPenguins.client;

import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;
import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLiving;
import net.minecraft.entity.EntityLivingBase;
import rancraftPenguins.EntityPenguinLB;
import net.minecraft.util.MathHelper;
import org.lwjgl.opengl.GL11;

// Referenced classes of package net.minecraft.src:
//            ModelBase, ModelRenderer, EntityPenguinLB, MathHelper, 
//            Entity, EntityLiving

public class ModelPenguinLB extends ModelBase
{
    public ModelRenderer headmain;
    public ModelRenderer body;
    public ModelRenderer rightwing;
    public ModelRenderer leftwing;
    public ModelRenderer rightfoot;
    public ModelRenderer leftfoot;
    ModelRenderer beak;
    //public ModelRenderer beak;
    private float pi = 3.141593F;
	private float headX, headY, headZ, bodyY, bodyleanX;

    public ModelPenguinLB()
    {
    	int offset = 0;
    	
    	textureWidth = 28;
        textureHeight = 26;
        
        headX = 0F;
        headY = 17F;
        headZ = -1F;
        bodyY = 20F;
        bodyleanX = pi / 12;

        			//setTextureOffset("ModelPenguin", 0, 0);
    	headmain = new ModelRenderer(this, 0, 0);
    	/* side,vert (neg is up),forward (neg is forward) Second set is dimensions! */ 
        headmain.addBox(-2F, -3F, -1F, 4, 3, 3);
        headmain.setRotationPoint(headX, headY + offset - bodyY, headZ);
        //setRotation(headmain, 0F, 0F, 0F);
        beak = new ModelRenderer(this, 15, 0);
        beak.addBox(-1F, -1F, -3F, 2, 1, 2);
        headmain.addChild(beak);
      //  beak.setRotationPoint(0F, headY - bodyY, -1F);
      //  setRotation(beak, 0F, 0F, 0F);
        body = new ModelRenderer(this, 0, 7);
        body.addBox(-2F, -3F, -2F, 4, 6, 3);
        body.setRotationPoint(0F, bodyY + offset, 1F);
        //setRotation(body, 0F, 0F, 0F);
        body.addChild(headmain);
        rightwing = new ModelRenderer(this, 7, 17);
        rightwing.addBox(0F, -1F, -1F, 1, 4, 2);
        rightwing.setRotationPoint(-3F, 19F - bodyY + offset, 1F);
        //setRotation(rightwing, 0F, 0F, 0F);
        body.addChild(rightwing);
        leftwing = new ModelRenderer(this, 0, 17);
        leftwing.addBox(-1F, -1F, 1F, 1, 4, 2);
        leftwing.setRotationPoint(3F, 19F - bodyY + offset, 1F);
        //setRotation(leftwing, 0F, 0F, 0F);
        body.addChild(leftwing);
        rightfoot = new ModelRenderer(this, 16, 12);
        rightfoot.addBox(-1F, 0F, -2F, 2, 1, 3);
        rightfoot.setRotationPoint(1F, 23F - bodyY, 1F);
        //setRotation(rightfoot, 0F, 0F, 0F);
        body.addChild(rightfoot);
        leftfoot = new ModelRenderer(this, 16, 12);
        leftfoot.addBox(-1F, 0F, -2F, 2, 1, 3);
        leftfoot.setRotationPoint(-1F, 23F - bodyY, 1F);
        //setRotation(leftfoot, 0F, 0F, 0F);
        body.addChild(leftfoot);
    }

    //public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
    /**
     * Sets the models various rotation angles then renders the model.
     */
    public void render(Entity par1Entity, float par2, float par3, float par4, float par5, float par6, float par7)
    {
        //super.render(entity, f, f1, f2, f3, f4, f5);
        setRotationAngles(par2, par3, par4, par5, par6, par7, par1Entity);
        if (isChild)
        {
            float f = 2.0F;
            GL11.glPushMatrix();
            GL11.glTranslatef(0.0F, 3.5F * par7, 0.6F * par7);
            headmain.render(par7);
            beak.render(par7);
            GL11.glPopMatrix();
            GL11.glPushMatrix();
            GL11.glScalef(1.0F / f, 1.0F / f, 1.0F / f);
            GL11.glTranslatef(0.0F, 24F * par7, 0.0F);
            body.render(par7);
            rightwing.render(par7);
            leftwing.render(par7);
            rightfoot.render(par7);
            leftfoot.render(par7);
            GL11.glPopMatrix();
        }
        else
        {
        	//headmain.render(par7);
        	//beak.render(par7);
        	body.render(par7);
        	//rightwing.render(par7);
        	//leftwing.render(par7);
        	//rightfoot.render(par7);
        	//leftfoot.render(par7);
        }
    }

    private void setRotation(ModelRenderer model, float x, float y, float z)
    {
      model.rotateAngleX = x;
      model.rotateAngleY = y;
      model.rotateAngleZ = z;
    }

    public void setLivingAnimations(EntityLivingBase entityliving, float f, float f1, float f2)
    {
    	int offset;
    	float cosf;
    	float speedSum;
    	
        EntityPenguinLB entitypenguin = (EntityPenguinLB)entityliving;
    	cosf = MathHelper.cos(f);
    	speedSum = entitypenguin.limbYaw;
		//speedSum = MathHelper.abs((float) entitypenguin.motionX) + MathHelper.abs((float) entitypenguin.motionZ);
		//System.out.printf("  SpeedSum : %f\n", speedSum);

		if (entitypenguin.isSitting()) // sitting
        {
        	offset = 1;
            //headmain.setRotationPoint(0F, 17F + offset, 0F);
            //beak.setRotationPoint(0F, 17F + offset, 0F);
    	    body.setRotationPoint(0F, 20F + offset, 1F);
    	    //rightwing.setRotationPoint(-3F, 19F + offset, 1F);
    	    //leftwing.setRotationPoint(3F, 19F + offset, 1F);
    	    //leftfoot.setRotationPoint(-1F, 22F + offset, -1F);
        	//rightfoot.setRotationPoint(1F, 22F + offset, -1F);
            body.rotateAngleX = 0.0F; // not leaning forward (LB and YE)
        	rightfoot.rotateAngleX = pi * 1.5F;
        	leftfoot.rotateAngleX = pi * 1.5F;
        } else { // not sitting
        	offset = 0;
            //headmain.setRotationPoint(0F, 17F + offset, -1F);
            //beak.setRotationPoint(0F, 17F + offset, -1F);
    	    body.setRotationPoint(0F, 20F + offset, 1F);
    	    //rightwing.setRotationPoint(-3F, 19F + offset, 1F);
    	    //leftwing.setRotationPoint(3F, 19F + offset, 1F);
        	//rightfoot.setRotationPoint(1F, 23F + offset, 0F);
    	    //leftfoot.setRotationPoint(-1F, 23F + offset, 0F);
            body.rotateAngleX = pi / 12; // leaning forward (LB and YE)
        	rightfoot.rotateAngleX = MathHelper.cos(f * 3.6662F + 3.141593F) * 1.4F * f1;
        	leftfoot.rotateAngleX = MathHelper.cos(f * 3.6662F) * 1.4F * f1;

            if (!entitypenguin.onGround || MathHelper.abs((float)entitypenguin.motionY) > 0.1F) // || entitypenguin.isAirBorne) <= Most of the time!
	        {
		        rightwing.rotateAngleY = pi / 3.0F;
		        rightwing.rotateAngleZ = pi / 2.5F;
	        } else { // not jumping (or sitting)
		        if(speedSum < 0.2F){ // standing or slow walk
			        rightwing.rotateAngleY = 0.0F;
			        rightwing.rotateAngleZ = MathHelper.abs(cosf * f1 * 0.2F) + pi / 32.0F;
		        } else { // faster walk
			        //penguinRightWing.rotateAngleY = 0.0F;
			        rightwing.rotateAngleY = pi / 3.0F;
			        rightwing.rotateAngleZ = MathHelper.abs(cosf * f1 * 0.2F) + pi / 8.0F;
		        }
	        }
	        leftwing.rotateAngleY = -1.0F * rightwing.rotateAngleY;
	        leftwing.rotateAngleZ = -1.0F * rightwing.rotateAngleZ;
	    }
		this.headmain.rotateAngleZ = entitypenguin.getInterestedAngle(f2) + entitypenguin.getShakeAngle(f2, 0.0F);
        float f3 = entitypenguin.getInterestedAngle(f2) + entitypenguin.getShakeAngle(f2, 0.0F);
        headmain.rotateAngleZ = f3;
        //beak.rotateAngleZ = f3;
        if(entitypenguin.getPenguinShaking())
        {
            float f4 = entitypenguin.getBrightness(f2) * entitypenguin.getShadingWhileShaking(f2);
            GL11.glColor3f(f4, f4, f4);
        }
    }

    public void setRotationAngles(float par1, float par2, float par3, float par4, float par5, float par6, Entity par7Entity)
    {
        super.setRotationAngles(par1, par2, par3, par4, par5, par6, par7Entity);
        //body.rotateAngleX = pi / 12; // leaning forward (LB, WF, YE, and Mag)
        headmain.rotateAngleX = par5 / 57.29578F;
        headmain.rotateAngleY = par4 / 57.29578F;
    }
}
